[{"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\App.js":"1","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Header\\index.js":"2","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\services\\api.js":"3","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Evolution\\index.js":"4","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\index.js":"5","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Select\\index.js":"6","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\index.js":"7","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\WellsChart\\index.js":"8","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\HexChart\\index.js":"9","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\CegonhaChart\\index.js":"10","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\RullerChart\\index.js":"11","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\LegerChart\\index.js":"12","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\HorizontalChart\\index.js":"13","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\AbsChart\\index.js":"14","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\FsktChart\\index.js":"15","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Sidebar\\index.js":"16","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Navbar\\index.js":"17","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\routes.js":"18","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Home\\index.js":"19","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Login\\index.js":"20","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\NewAtlete\\index.js":"21"},{"size":308,"mtime":1609247995887,"results":"22","hashOfConfig":"23"},{"size":259,"mtime":1606591708967,"results":"24","hashOfConfig":"23"},{"size":117,"mtime":1606677096851,"results":"25","hashOfConfig":"23"},{"size":5140,"mtime":1609247362759,"results":"26","hashOfConfig":"23"},{"size":162,"mtime":1606158961639,"results":"27","hashOfConfig":"23"},{"size":1164,"mtime":1607780829654,"results":"28","hashOfConfig":"23"},{"size":2243,"mtime":1609154615820,"results":"29","hashOfConfig":"23"},{"size":3254,"mtime":1609154841613,"results":"30","hashOfConfig":"23"},{"size":3189,"mtime":1609154957985,"results":"31","hashOfConfig":"23"},{"size":3195,"mtime":1609154957985,"results":"32","hashOfConfig":"23"},{"size":3185,"mtime":1609154957967,"results":"33","hashOfConfig":"23"},{"size":3190,"mtime":1609154957963,"results":"34","hashOfConfig":"23"},{"size":3198,"mtime":1609154957963,"results":"35","hashOfConfig":"23"},{"size":3210,"mtime":1609154957963,"results":"36","hashOfConfig":"23"},{"size":3203,"mtime":1609154958050,"results":"37","hashOfConfig":"23"},{"size":2381,"mtime":1609257248149,"results":"38","hashOfConfig":"23"},{"size":954,"mtime":1609164042533,"results":"39","hashOfConfig":"23"},{"size":677,"mtime":1609257248967,"results":"40","hashOfConfig":"23"},{"size":3370,"mtime":1610998406388,"results":"41","hashOfConfig":"23"},{"size":1064,"mtime":1609248538182,"results":"42","hashOfConfig":"23"},{"size":1949,"mtime":1609258502298,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l978n4",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\App.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Header\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\services\\api.js",[],["99","100"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Evolution\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\index.js",[],["101","102"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Select\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\index.js",[],["103","104"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\WellsChart\\index.js",["105"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass WellsChart extends Component {\r\n\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label=\"cm\" type=\"number\" domain={[0, 'dataMax + 10']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wellsChart\">\r\n                 {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WellsChart;\r\n\r\n/**\r\n * #d41002 - red\r\n * #d48402 - orange\r\n * #d4bb02 - yellow\r\n * #089c19 - green\r\n * #3944bc - blue\r\n */","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\HexChart\\index.js",["106"],"import React, { Component } from 'react';\r\n\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass HexChart extends Component {\r\n\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'segundos', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 20']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"hexChart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HexChart;",["107","108"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\CegonhaChart\\index.js",["109"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass CegonhaChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'segundos', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 10']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CegonhaChart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CegonhaChart;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\RullerChart\\index.js",["110"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass RullerChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'cm', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 5']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"RullerChart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RullerChart;",["111","112"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\LegerChart\\index.js",["113"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass LegerChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'segundos', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 20']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Leger-chart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LegerChart;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\HorizontalChart\\index.js",["114"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\AbsChart\\index.js",["115"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass AbsChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'qtd abs/30 s', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 40']} margin={{left: 30}}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"abs-chart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbsChart;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\FsktChart\\index.js",["116"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass FsktChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'qtd chutes bandal tchagui', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 30']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"fskt-chart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FsktChart;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Sidebar\\index.js",["117","118","119"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Navbar\\index.js",["120","121"],"import React, {Component} from 'react';\r\nimport './styles.css';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return(\r\n            <nav className=\"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow\">\r\n                <a className=\"navbar-brand col-md-3 col-lg-2 mr-0 px-3\" href=\"#\">AITest</a>\r\n                <button className=\"navbar-toggler position-absolute d-md-none collapsed\" type=\"button\" data-toggle=\"collapse\" data-target=\"#sidebarMenu\" aria-controls=\"sidebarMenu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <ul className=\"navbar-nav px-3\">\r\n                    <li className=\"nav-item text-nowrap\">\r\n                        <a className=\"nav-link\" href=\"#\">Nome do Usuário</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\nexport default Navbar;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\routes.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Home\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Login\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\NewAtlete\\index.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"122","replacedBy":"128"},{"ruleId":"124","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":9,"column":15,"nodeType":"132","messageId":"133","endLine":9,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":10,"column":15,"nodeType":"132","messageId":"133","endLine":10,"endColumn":21},{"ruleId":"122","replacedBy":"134"},{"ruleId":"124","replacedBy":"135"},{"ruleId":"130","severity":1,"message":"131","line":8,"column":15,"nodeType":"132","messageId":"133","endLine":8,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":8,"column":15,"nodeType":"132","messageId":"133","endLine":8,"endColumn":21},{"ruleId":"122","replacedBy":"136"},{"ruleId":"124","replacedBy":"137"},{"ruleId":"130","severity":1,"message":"131","line":8,"column":15,"nodeType":"132","messageId":"133","endLine":8,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":8,"column":15,"nodeType":"132","messageId":"133","endLine":8,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":8,"column":15,"nodeType":"132","messageId":"133","endLine":8,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":8,"column":15,"nodeType":"132","messageId":"133","endLine":8,"endColumn":21},{"ruleId":"138","severity":1,"message":"139","line":19,"column":29,"nodeType":"140","endLine":19,"endColumn":62},{"ruleId":"138","severity":1,"message":"139","line":31,"column":29,"nodeType":"140","endLine":31,"endColumn":62},{"ruleId":"138","severity":1,"message":"139","line":43,"column":29,"nodeType":"140","endLine":43,"endColumn":62},{"ruleId":"138","severity":1,"message":"139","line":8,"column":17,"nodeType":"140","endLine":8,"endColumn":82},{"ruleId":"138","severity":1,"message":"139","line":14,"column":25,"nodeType":"140","endLine":14,"endColumn":58},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],["141"],["142"],["141"],["142"],"no-unused-vars","'radius' is assigned a value but never used.","Identifier","unusedVar",["141"],["142"],["141"],["142"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]