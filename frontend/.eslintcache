[{"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\App.js":"1","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Header\\index.js":"2","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\services\\api.js":"3","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Evolution\\index.js":"4","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\index.js":"5","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Select\\index.js":"6","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\index.js":"7","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\WellsChart\\index.js":"8","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\HexChart\\index.js":"9","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\CegonhaChart\\index.js":"10","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\RullerChart\\index.js":"11","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\LegerChart\\index.js":"12","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\HorizontalChart\\index.js":"13","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\AbsChart\\index.js":"14","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\FsktChart\\index.js":"15","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Sidebar\\index.js":"16","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Navbar\\index.js":"17","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\routes.js":"18","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Home\\index.js":"19","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Login\\index.js":"20","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\NewAtlete\\index.js":"21","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\routes.js":"22","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\pages\\GeneralEvolution\\index.js":"23","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\GeneralChart\\index.js":"24","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\App.js":"25","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\pages\\Home\\index.js":"26","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\pages\\NewAtlete\\index.js":"27","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Navbar\\index.js":"28","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\WellsChart\\index.js":"29","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\HexChart\\index.js":"30","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\FsktChart\\index.js":"31","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\CegonhaChart\\index.js":"32","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\AbsChart\\index.js":"33"},{"size":308,"mtime":1609247995887,"results":"34","hashOfConfig":"35"},{"size":259,"mtime":1606591708967,"results":"36","hashOfConfig":"35"},{"size":117,"mtime":1606677096851,"results":"37","hashOfConfig":"35"},{"size":5140,"mtime":1609247362759,"results":"38","hashOfConfig":"35"},{"size":162,"mtime":1606158961639,"results":"39","hashOfConfig":"35"},{"size":1164,"mtime":1607780829654,"results":"40","hashOfConfig":"35"},{"size":2243,"mtime":1609154615820,"results":"41","hashOfConfig":"35"},{"size":3254,"mtime":1609154841613,"results":"42","hashOfConfig":"35"},{"size":3189,"mtime":1609154957985,"results":"43","hashOfConfig":"35"},{"size":3195,"mtime":1609154957985,"results":"44","hashOfConfig":"35"},{"size":3185,"mtime":1609154957967,"results":"45","hashOfConfig":"35"},{"size":3190,"mtime":1609154957963,"results":"46","hashOfConfig":"35"},{"size":3198,"mtime":1609154957963,"results":"47","hashOfConfig":"35"},{"size":3210,"mtime":1609154957963,"results":"48","hashOfConfig":"35"},{"size":3203,"mtime":1609154958050,"results":"49","hashOfConfig":"35"},{"size":2381,"mtime":1609257248149,"results":"50","hashOfConfig":"35"},{"size":954,"mtime":1609164042533,"results":"51","hashOfConfig":"35"},{"size":677,"mtime":1609257248967,"results":"52","hashOfConfig":"35"},{"size":3372,"mtime":1611182646262,"results":"53","hashOfConfig":"35"},{"size":1064,"mtime":1611092302129,"results":"54","hashOfConfig":"35"},{"size":1949,"mtime":1609258502298,"results":"55","hashOfConfig":"35"},{"size":677,"mtime":1611678994909,"results":"56","hashOfConfig":"57"},{"size":1796,"mtime":1611684470030,"results":"58","hashOfConfig":"57"},{"size":12479,"mtime":1611696497714,"results":"59","hashOfConfig":"57"},{"size":308,"mtime":1609247995887,"results":"60","hashOfConfig":"57"},{"size":3372,"mtime":1611182646262,"results":"61","hashOfConfig":"57"},{"size":1949,"mtime":1609258502298,"results":"62","hashOfConfig":"57"},{"size":954,"mtime":1609164042533,"results":"63","hashOfConfig":"57"},{"size":3224,"mtime":1611696638699,"results":"64","hashOfConfig":"57"},{"size":3189,"mtime":1609154957985,"results":"65","hashOfConfig":"57"},{"size":3203,"mtime":1609154958050,"results":"66","hashOfConfig":"57"},{"size":3167,"mtime":1611696638693,"results":"67","hashOfConfig":"57"},{"size":3182,"mtime":1611696638881,"results":"68","hashOfConfig":"57"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l978n4",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"85"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"99"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"75"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17786e",{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\App.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Header\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\services\\api.js",[],["148","149"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Evolution\\index.js",[],["150","151"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Select\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\index.js",[],["152","153"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\WellsChart\\index.js",["154"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass WellsChart extends Component {\r\n\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label=\"cm\" type=\"number\" domain={[0, 'dataMax + 10']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wellsChart\">\r\n                 {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WellsChart;\r\n\r\n/**\r\n * #d41002 - red\r\n * #d48402 - orange\r\n * #d4bb02 - yellow\r\n * #089c19 - green\r\n * #3944bc - blue\r\n */","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\HexChart\\index.js",["155"],"import React, { Component } from 'react';\r\n\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass HexChart extends Component {\r\n\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'segundos', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 20']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"hexChart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HexChart;",["156","157"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\CegonhaChart\\index.js",["158"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass CegonhaChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'segundos', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 10']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CegonhaChart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CegonhaChart;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\RullerChart\\index.js",["159"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass RullerChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'cm', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 5']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"RullerChart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RullerChart;",["160","161"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\LegerChart\\index.js",["162"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass LegerChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'segundos', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 20']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Leger-chart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LegerChart;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\HorizontalChart\\index.js",["163"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\AbsChart\\index.js",["164"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass AbsChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'qtd abs/30 s', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 40']} margin={{left: 30}}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"abs-chart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbsChart;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Chart\\FsktChart\\index.js",["165"],"import React, {Component} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, Legend, Cell, LabelList } from 'recharts';\r\n\r\nclass FsktChart extends Component {\r\n    mostraValores(data) {\r\n\r\n        const { valores } = data;\r\n        const radius = 10;\r\n\r\n        return (\r\n            <g>\r\n                <text fill=\"#fff\" textAnchor=\"middle\" dominantBaseline=\"middle\">\r\n                    {valores}\r\n                </text>\r\n            </g>\r\n        );\r\n    };\r\n\r\n    geraBarra(score) {\r\n        if(score === 1) {\r\n            return \"#d41002\";\r\n        } else if (score === 2) {\r\n            return \"#d48402\";\r\n        } else if (score === 3) {\r\n            return \"#d4bb02\";\r\n        } else if (score === 4) {\r\n            return \"#089c19\";\r\n        }\r\n        return \"#3944bc\";\r\n    }\r\n\r\n    geraGrafico() {\r\n        let values = this.props.values;\r\n        console.log(values);\r\n        if(this.props.values.length < 1) {\r\n            return (\r\n                <h2 id=\"msg-sem-grafico\">Não há gáficos para esta consulta</h2>\r\n            );\r\n        } \r\n        let data = [];\r\n        for(let i in values) {\r\n            data[i] = {\r\n                \"avaliacaoID\": values[i].avaliacaoID, \r\n                \"dataAvaliacao\": values[i].dataAvaliacao,\r\n                \"valores\" : values[i].valores,\r\n                \"score\": values[i].score,\r\n            }\r\n        }\r\n        return (\r\n            <BarChart width={900} height={380} data={data} margin={{top: 20, right: 5, left: 20, bottom: 5 }}>\r\n                <XAxis height={68} dataKey=\"dataAvaliacao\"  angle={-45} textAnchor=\"end\" />\r\n                <YAxis label={{ value: 'qtd chutes bandal tchagui', angle: -90, position: 'left' }} type=\"number\" domain={[0, 'dataMax + 30']}/>\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"right\" margin={{right: 30}}\r\n                    payload={\r\n                        [\r\n                            { id: 'ruim',        value: 'Ruim',            type: 'circle', color: '#d41002'},\r\n                            { id: 'abaixoMedia', value: 'Abaixo da Média', type: 'circle', color: '#d48402'},\r\n                            { id: 'media',       value: 'Média',           type: 'circle', color: '#d4bb02'},\r\n                            { id: 'acimaMedia',  value: 'Acima da Média',  type: 'circle', color: '#089c19'},\r\n                            { id: 'Excelente',   value: 'Excelente',       type: 'circle', color: '#3944bc'},\r\n                        ]\r\n                    }\r\n                />\r\n                <Bar dataKey=\"valores\"  label={{ position: 'top' }}>\r\n                    <LabelList position=\"top\"/>\r\n                    {\r\n                        data.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={this.geraBarra(data[index].score)} strokeWidth={index === 2 ? 4 : 1}  Label datakey={data[index].valores} />\r\n                        ))\r\n                    }\r\n                </Bar>\r\n            </BarChart>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"fskt-chart\">\r\n                {this.geraGrafico()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FsktChart;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Sidebar\\index.js",["166","167","168"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\components\\Navbar\\index.js",["169","170"],"import React, {Component} from 'react';\r\nimport './styles.css';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return(\r\n            <nav className=\"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow\">\r\n                <a className=\"navbar-brand col-md-3 col-lg-2 mr-0 px-3\" href=\"#\">AITest</a>\r\n                <button className=\"navbar-toggler position-absolute d-md-none collapsed\" type=\"button\" data-toggle=\"collapse\" data-target=\"#sidebarMenu\" aria-controls=\"sidebarMenu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <ul className=\"navbar-nav px-3\">\r\n                    <li className=\"nav-item text-nowrap\">\r\n                        <a className=\"nav-link\" href=\"#\">Nome do Usuário</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\nexport default Navbar;","C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\routes.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Home\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\Login\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\TCC2\\AITest\\frontend\\src\\pages\\NewAtlete\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\routes.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\pages\\GeneralEvolution\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\GeneralChart\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\App.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\pages\\Home\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\pages\\NewAtlete\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Navbar\\index.js",["171","172"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\WellsChart\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\HexChart\\index.js",["173"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\FsktChart\\index.js",["174"],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\CegonhaChart\\index.js",[],"C:\\Users\\DenerThiago\\Google Drive\\tcc-tkd\\tcc2\\AITest\\frontend\\src\\components\\Chart\\AbsChart\\index.js",[],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"175","replacedBy":"179"},{"ruleId":"177","replacedBy":"180"},{"ruleId":"175","replacedBy":"181"},{"ruleId":"177","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":9,"column":15,"nodeType":"185","messageId":"186","endLine":9,"endColumn":21},{"ruleId":"183","severity":1,"message":"184","line":10,"column":15,"nodeType":"185","messageId":"186","endLine":10,"endColumn":21},{"ruleId":"175","replacedBy":"187"},{"ruleId":"177","replacedBy":"188"},{"ruleId":"183","severity":1,"message":"184","line":8,"column":15,"nodeType":"185","messageId":"186","endLine":8,"endColumn":21},{"ruleId":"183","severity":1,"message":"184","line":8,"column":15,"nodeType":"185","messageId":"186","endLine":8,"endColumn":21},{"ruleId":"175","replacedBy":"189"},{"ruleId":"177","replacedBy":"190"},{"ruleId":"183","severity":1,"message":"184","line":8,"column":15,"nodeType":"185","messageId":"186","endLine":8,"endColumn":21},{"ruleId":"183","severity":1,"message":"184","line":8,"column":15,"nodeType":"185","messageId":"186","endLine":8,"endColumn":21},{"ruleId":"183","severity":1,"message":"184","line":8,"column":15,"nodeType":"185","messageId":"186","endLine":8,"endColumn":21},{"ruleId":"183","severity":1,"message":"184","line":8,"column":15,"nodeType":"185","messageId":"186","endLine":8,"endColumn":21},{"ruleId":"191","severity":1,"message":"192","line":19,"column":29,"nodeType":"193","endLine":19,"endColumn":62},{"ruleId":"191","severity":1,"message":"192","line":31,"column":29,"nodeType":"193","endLine":31,"endColumn":62},{"ruleId":"191","severity":1,"message":"192","line":43,"column":29,"nodeType":"193","endLine":43,"endColumn":62},{"ruleId":"191","severity":1,"message":"192","line":8,"column":17,"nodeType":"193","endLine":8,"endColumn":82},{"ruleId":"191","severity":1,"message":"192","line":14,"column":25,"nodeType":"193","endLine":14,"endColumn":58},{"ruleId":"191","severity":1,"message":"192","line":8,"column":17,"nodeType":"193","endLine":8,"endColumn":82},{"ruleId":"191","severity":1,"message":"192","line":14,"column":25,"nodeType":"193","endLine":14,"endColumn":58},{"ruleId":"183","severity":1,"message":"184","line":10,"column":15,"nodeType":"185","messageId":"186","endLine":10,"endColumn":21},{"ruleId":"183","severity":1,"message":"184","line":8,"column":15,"nodeType":"185","messageId":"186","endLine":8,"endColumn":21},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],["194"],["195"],["194"],["195"],"no-unused-vars","'radius' is assigned a value but never used.","Identifier","unusedVar",["194"],["195"],["194"],["195"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]